{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-702cd5c7-12de-4381-b4a5-39f97dfac351",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Detection of Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are considered unsafe due to their potential to cause buffer overflows and other security issues. The `sprintf` function is one such function because it does not perform bounds checking on the destination buffer, which can lead to buffer overflow vulnerabilities if the input data exceeds the buffer size.\n\n### General Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives that perform bounds checking. In C++, you can use `snprintf` or `std::stringstream` to safely format strings. These alternatives help prevent buffer overflows by ensuring that the destination buffer is not overrun.\n\n### Source Code Fix Recommendation\n\nReplace the use of `sprintf` with `snprintf` to ensure that the buffer size is respected. Here is a fixed version of the code:\n\n```cpp\n#include <cstdio>\n#include <cstring>\n\nconst size_t BUFFER_SIZE = 1024;\n\nvoid safeFunction(const char* pdi_dir, const char* filenames[], size_t i) {\n    char full_name[BUFFER_SIZE];\n    snprintf(full_name, sizeof(full_name), \"%s/%s\", pdi_dir, filenames[i]);\n    // Use full_name safely\n}\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following standard libraries are required:\n\n- `<cstdio>`: For `snprintf`.\n- `<cstring>`: For string manipulation functions.\n\n### Relevant Resources\n\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration\n\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "glog-b579e87d-1dd0-496d-9593-ee3789648994",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Detection of Prohibited C Function\" vulnerability in C++ arises when certain C functions, which are considered unsafe or deprecated, are used in the code. These functions can lead to security issues such as buffer overflows, format string vulnerabilities, and other undefined behaviors. The use of `fopen` with user-controlled input, as shown in the example, can lead to security vulnerabilities if the input is not properly validated or sanitized.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Always validate and sanitize user inputs to ensure they conform to expected formats and do not contain malicious data.\n2. **Use Safer Alternatives**: Replace unsafe functions with safer alternatives that provide better security guarantees.\n3. **Error Handling**: Implement robust error handling to manage unexpected conditions gracefully.\n4. **Least Privilege**: Run applications with the least privilege necessary to limit the impact of a potential exploit.\n\n### Source Code Fix Recommendation\n\nReplace the use of `fopen` with a safer alternative, such as `std::ifstream` in C++. This provides better type safety and integrates well with C++'s standard library features.\n\n```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n\nint main() {\n    std::string full_name = \"example.txt\"; // Ensure this is validated and sanitized\n    std::ifstream file(full_name, std::ios::binary);\n\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file: \" << full_name << std::endl;\n        return 1;\n    }\n\n    // Process the file\n    // ...\n\n    file.close();\n    return 0;\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, the following standard C++ library is required:\n\n- `<iostream>`: For input and output stream operations.\n- `<fstream>`: For file stream operations.\n- `<string>`: For string manipulation.\n\n### Relevant Resources\n\n- [OWASP Secure Coding Practices - Quick Reference Guide](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n- [Common Weakness Enumeration - CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "glog-2e081451-7ae6-4a97-898f-90b35dc17a31",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe \"Detection of Prohibited C Function\" vulnerability refers to the use of certain C standard library functions that are considered unsafe or deprecated due to their potential to cause security issues such as buffer overflows, data corruption, or undefined behavior. In C++, using these functions can lead to vulnerabilities if not handled properly. The `qsort` function, while not inherently unsafe, can be misused if the comparator function or the data being sorted is not handled correctly.\n\n### General Mitigation Advice\n\n1. **Use Safer Alternatives**: Prefer using C++ standard library functions and algorithms that provide better type safety and are less error-prone, such as `std::sort`.\n2. **Validate Inputs**: Ensure that all inputs to the function are validated and sanitized to prevent unexpected behavior.\n3. **Proper Comparator Function**: Ensure that the comparator function used with `qsort` is correctly implemented and does not cause undefined behavior.\n4. **Bounds Checking**: Always perform bounds checking to prevent buffer overflows.\n\n### Source Code Fix Recommendation\n\nReplace the use of `qsort` with `std::sort` from the C++ Standard Library, which is type-safe and generally more efficient.\n\n```cpp\n#include <algorithm>\n#include <vector>\n#include <string>\n\n// Comparator function for std::sort\nbool compare(const std::string &a, const std::string &b) {\n    return a < b;\n}\n\nint main() {\n    std::vector<std::string> filenames = {\"file1.txt\", \"file2.txt\", \"file3.txt\"};\n    \n    // Use std::sort instead of qsort\n    std::sort(filenames.begin(), filenames.end(), compare);\n\n    return 0;\n}\n```\n\n### Library Dependencies\n\nTo execute the above code example, the following standard C++ library headers are required:\n\n- `<algorithm>`: For `std::sort`.\n- `<vector>`: For using `std::vector`.\n- `<string>`: For using `std::string`.\n\n### Relevant Resources\n\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n\n### Common Weakness Enumeration\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "glog-2406f23f-8672-4e67-9cf5-15134b10a94e",
              "help": {
                "text": "",
                "markdown": "### Description\n\nThe vulnerability associated with the use of the `strlen` function in C/C++ arises when the function is used without proper validation or bounds checking, potentially leading to buffer overflow or other memory-related issues. In the context of the code snippet `len = strlen(ent->d_name)`, if `ent->d_name` is not properly null-terminated or if it points to a memory region that is not properly allocated, it can cause undefined behavior, including reading beyond the allocated memory.\n\n### General Mitigation Advice\n\n1. **Input Validation**: Ensure that all input strings are properly null-terminated and within expected length limits before using `strlen`.\n2. **Bounds Checking**: Always perform bounds checking on strings to prevent buffer overflows.\n3. **Use Safer Alternatives**: Consider using safer string handling functions like `strnlen` which allows specifying a maximum length to prevent reading beyond the buffer.\n4. **Memory Management**: Ensure that memory is properly allocated and deallocated, and that pointers are not used after being freed.\n\n### Source Code Fix Recommendation\n\nTo mitigate the risk associated with the use of `strlen`, you can replace it with `strnlen` and specify a maximum length that is within the bounds of the allocated memory for `ent->d_name`.\n\n```cpp\n#include <cstring> // Required for strnlen\n#include <limits.h> // Required for PATH_MAX\n\n// Assuming ent->d_name is a character array with a known maximum size\nsize_t len = strnlen(ent->d_name, PATH_MAX);\n```\n\n### Library Dependencies\n\nTo execute the code example properly, the following libraries are required:\n\n- `<cstring>`: For `strnlen` function.\n- `<limits.h>`: For `PATH_MAX` which defines the maximum length of a path.\n\n### Relevant Resources\n\n- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)\n- [OWASP Secure Coding Practices](https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/)\n\n### Common Weakness Enumeration\n\n- [CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')](https://cwe.mitre.org/data/definitions/120.html)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-702cd5c7-12de-4381-b4a5-39f97dfac351",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Banned C function detected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ioctl_test.c"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 2,
                  "endLine": 249,
                  "endColumn": 9,
                  "charOffset": 5886,
                  "charLength": 7,
                  "snippet": {
                    "text": "sprintf",
                    "rendered": {
                      "text": "sprintf",
                      "markdown": "`sprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b579e87d-1dd0-496d-9593-ee3789648994",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Banned C function detected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ioctl_test.c"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 7,
                  "endLine": 250,
                  "endColumn": 12,
                  "charOffset": 5945,
                  "charLength": 5,
                  "snippet": {
                    "text": "fopen",
                    "rendered": {
                      "text": "fopen",
                      "markdown": "`fopen`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2e081451-7ae6-4a97-898f-90b35dc17a31",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Banned C function detected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ioctl_test.c"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 1,
                  "endLine": 233,
                  "endColumn": 6,
                  "charOffset": 5455,
                  "charLength": 5,
                  "snippet": {
                    "text": "qsort",
                    "rendered": {
                      "text": "qsort",
                      "markdown": "`qsort`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2406f23f-8672-4e67-9cf5-15134b10a94e",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Problematic C function detected (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "ioctl_test.c"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 12,
                  "endLine": 223,
                  "endColumn": 31,
                  "charOffset": 5288,
                  "charLength": 19,
                  "snippet": {
                    "text": "strlen(ent->d_name)",
                    "rendered": {
                      "text": "strlen(ent->d_name)",
                      "markdown": "`strlen(ent->d_name)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ioctl_test.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5288,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "strlen_s(ent->d_name, <size of ent->d_name>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "ioctl_test.c"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5288,
                        "charLength": 19
                      },
                      "insertedContent": {
                        "text": "strnlen(ent->d_name, <size of ent->d_name>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}